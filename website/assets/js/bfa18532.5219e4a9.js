"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8399],{3270:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"scanner-plugins","title":"Scanner Plugins","description":"Motivation","source":"@site/docs/scanner-plugins.md","sourceDirName":".","slug":"/scanner-plugins","permalink":"/copacetic/website/next/scanner-plugins","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Scanner Plugins"},"sidebar":"sidebar","previous":{"title":"VEX Output","permalink":"/copacetic/website/next/output"},"next":{"title":"Multi-Platform Patching","permalink":"/copacetic/website/next/multiplatform-patching"}}');var t=a(4848),s=a(8453);const r={title:"Scanner Plugins"},l=void 0,o={},c=[{value:"Motivation",id:"motivation",level:2},{value:"Usage",id:"usage",level:2},{value:"Scanner Plugins from the Community",id:"scanner-plugins-from-the-community",level:2},{value:"Writing a Scanner Plugin",id:"writing-a-scanner-plugin",level:2},{value:"Scanner Plugin Interface",id:"scanner-plugin-interface",level:2},{value:"v1alpha1",id:"v1alpha1",level:2},{value:"v1alpha2",id:"v1alpha2",level:2},{value:"Format Examples",id:"format-examples",level:2},{value:"v1alpha1",id:"v1alpha1-1",level:3},{value:"v1alpha2",id:"v1alpha2-1",level:3}];function d(n){const e={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{id:"motivation",children:"Motivation"}),"\n",(0,t.jsxs)(e.p,{children:["By default, ",(0,t.jsx)(e.code,{children:"copa"})," uses ",(0,t.jsx)(e.a,{href:"https://github.com/aquasecurity/trivy",children:"Trivy"})," to scan container images for vulnerabilities. However, we understand that different organizations have different requirements and may want to use different vulnerability scanners."]}),"\n",(0,t.jsxs)(e.p,{children:["Starting with v0.5.0 and later, ",(0,t.jsx)(e.code,{children:"copa"})," offers extensibility to support different vulnerability scanners. Plugin architecture allows users to use the vulnerability scanner of their choice to patch container images without having to modify ",(0,t.jsx)(e.code,{children:"copa"}),"'s core codebase."]}),"\n",(0,t.jsx)(e.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsxs)(e.p,{children:["Scanner plugin binaries must be in ",(0,t.jsx)(e.code,{children:"$PATH"}),", and should be prefixed with ",(0,t.jsx)(e.code,{children:"copa-"})," and have executable permissions. Copa will automatically detect and use the scanner plugin if it is in ",(0,t.jsx)(e.code,{children:"$PATH"}),"."]}),"\n",(0,t.jsxs)(e.p,{children:["For example, if you have a scanner plugin binary called ",(0,t.jsx)(e.code,{children:"copa-foo"})," in ",(0,t.jsx)(e.code,{children:"$PATH"}),", you can run ",(0,t.jsx)(e.code,{children:"copa"})," with the following command:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"copa patch --scanner foo --image $IMAGE ...\n"})}),"\n",(0,t.jsx)(e.admonition,{type:"note",children:(0,t.jsxs)(e.p,{children:["You can also a submit scan report in native ",(0,t.jsx)(e.code,{children:"v1alpha1"})," format (interface mentioned below) by using ",(0,t.jsx)(e.code,{children:"--scanner native"})," flag along with ",(0,t.jsx)(e.code,{children:"-r <report>"})," flag."]})}),"\n",(0,t.jsx)(e.h2,{id:"scanner-plugins-from-the-community",children:"Scanner Plugins from the Community"}),"\n",(0,t.jsx)(e.p,{children:"If you have built a scanner plugin and would like to add it to this list, please submit a PR to update this section with your plugin."}),"\n",(0,t.jsx)(e.admonition,{type:"note",children:(0,t.jsx)(e.p,{children:"If you have any issues with a specific plugin, please open an issue in the applicable plugin's repository."})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["Grype: ",(0,t.jsx)(e.a,{href:"https://github.com/anubhav06/copa-grype",children:"https://github.com/anubhav06/copa-grype"})]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"writing-a-scanner-plugin",children:"Writing a Scanner Plugin"}),"\n",(0,t.jsxs)(e.p,{children:["Please see instructions at ",(0,t.jsx)(e.a,{href:"https://github.com/project-copacetic/scanner-plugin-template",children:"Scanner Plugin Template"})," for a template to get started with writing a scanner plugin."]}),"\n",(0,t.jsx)(e.h2,{id:"scanner-plugin-interface",children:"Scanner Plugin Interface"}),"\n",(0,t.jsxs)(e.admonition,{type:"note",children:[(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:"alpha"})," versions of the API are not guarenteed to be backwards compatible. Once the API graduates to ",(0,t.jsx)(e.code,{children:"beta"})," and ",(0,t.jsx)(e.code,{children:"stable"}),", it will be backwards compatible."]}),(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"API Versions:"})}),(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"v1alpha1"}),": Original format with single ",(0,t.jsx)(e.code,{children:"updates"})," field - existing plugins continue to work"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"v1alpha2"}),": New format with separate ",(0,t.jsx)(e.code,{children:"osupdates"})," and ",(0,t.jsx)(e.code,{children:"langupdates"})," fields that supports app-level patching"]}),"\n"]})]}),"\n",(0,t.jsx)(e.p,{children:"Scanner plugins support two API versions for backwards compatibility:"}),"\n",(0,t.jsx)(e.h2,{id:"v1alpha1",children:"v1alpha1"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",children:'type UpdateManifest struct {\n    // API version (v1alpha1)\n    APIVersion string         `json:"apiVersion"`\n    // Metadata contains information about the OS and config\n    Metadata   Metadata       `json:"metadata"`\n    // Updates contains all package updates (OS packages only)\n    Updates    UpdatePackages `json:"updates"`\n}\n\ntype UpdatePackage struct {\n    // Package name\n    Name             string `json:"name"`\n    // Installed version\n    InstalledVersion string `json:"installedVersion"`\n    // Fixed version\n    FixedVersion     string `json:"fixedVersion"`\n    // Vulnerability ID\n    VulnerabilityID  string `json:"vulnerabilityID"`\n}\n\ntype Metadata struct {\n    OS     OS     `json:"os"`\n    Config Config `json:"config"`\n}\n\ntype Config struct {\n    // OS Architecture (e.g. amd64, arm64)\n    Arch string `json:"arch"`\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"v1alpha2",children:"v1alpha2"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",children:'type UpdateManifest struct {\n    // API version (v1alpha2)\n    APIVersion  string             `json:"apiVersion"`\n    // Metadata contains information about the OS and config\n    Metadata    Metadata           `json:"metadata"`\n    // OSUpdates is a list of OS package updates\n    OSUpdates   UpdatePackages     `json:"osupdates"`\n    // LangUpdates is a list of language/library package updates\n    LangUpdates LangUpdatePackages `json:"langupdates"`\n}\n\ntype UpdatePackage struct {\n    // Package name\n    Name             string `json:"name"`\n    // Installed version\n    InstalledVersion string `json:"installedVersion"`\n    // Fixed version\n    FixedVersion     string `json:"fixedVersion"`\n    // Vulnerability ID\n    VulnerabilityID  string `json:"vulnerabilityID"`\n    // Package type (python-pkg)\n    Type             string `json:"type"`\n    // Package class (os-pkgs, lang-pkgs)\n    Class            string `json:"class"`\n}\n\ntype Config struct {\n    // OS Architecture (e.g. amd64, arm64)\n    Arch    string `json:"arch"`\n    // Architecture variant (e.g. v8)\n    Variant string `json:"variant,omitempty"`\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"format-examples",children:"Format Examples"}),"\n",(0,t.jsx)(e.p,{children:"From the above, we can see that the plugin must return a JSON object via standard out with the following fields."}),"\n",(0,t.jsx)(e.h3,{id:"v1alpha1-1",children:"v1alpha1"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-json",children:'{\n  "apiVersion": "v1alpha1",\n  "metadata": {\n    "os": {\n        "type": "debian",\n        "version": "11.3"\n    },\n    "config": {\n      "arch": "amd64"\n    }\n  },\n  "updates": [\n      {\n          "name": "libcurl4",\n          "installedVersion": "7.74.0-1.3+deb11u1",\n          "fixedVersion": "7.74.0-1.3+deb11u2",\n          "vulnerabilityID": "CVE-2021-22945"\n      }\n  ]\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"v1alpha2-1",children:"v1alpha2"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-json",children:'{\n  "apiVersion": "v1alpha2",\n  "metadata": {\n    "os": {\n        "type": "debian",\n        "version": "11.3"\n    },\n    "config": {\n      "arch": "amd64",\n      "variant": "v8"\n    }\n  },\n  "osupdates": [\n      {\n          "name": "libcurl4",\n          "installedVersion": "7.74.0-1.3+deb11u1",\n          "fixedVersion": "7.74.0-1.3+deb11u2",\n          "vulnerabilityID": "CVE-2021-22945",\n          "type": "debian",\n          "class": "os-pkgs"\n      }\n  ],\n  "langupdates": [\n      {\n          "name": "requests",\n          "installedVersion": "2.25.1",\n          "fixedVersion": "2.31.0",\n          "vulnerabilityID": "CVE-2023-32681",\n          "type": "python-pkg",\n          "class": "lang-pkgs"\n      }\n  ]\n}\n'})})]})}function p(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},8453:(n,e,a)=>{a.d(e,{R:()=>r,x:()=>l});var i=a(6540);const t={},s=i.createContext(t);function r(n){const e=i.useContext(s);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:r(n.components),i.createElement(s.Provider,{value:e},n.children)}}}]);