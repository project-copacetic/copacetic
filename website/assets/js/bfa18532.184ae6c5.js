"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8399],{3270:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"scanner-plugins","title":"Scanner Plugins","description":"By default, copa uses Trivy to scan container images for vulnerabilities. However, we understand that different organizations have different requirements and may want to use different vulnerability scanners.","source":"@site/docs/scanner-plugins.md","sourceDirName":".","slug":"/scanner-plugins","permalink":"/copacetic/website/next/scanner-plugins","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Scanner Plugins"},"sidebar":"sidebar","previous":{"title":"Output","permalink":"/copacetic/website/next/output"},"next":{"title":"Multi-Platform Patching","permalink":"/copacetic/website/next/multiarch-patching"}}');var i=t(4848),s=t(8453);const r={title:"Scanner Plugins"},o="Motivation",c={},l=[{value:"v1alpha1",id:"v1alpha1",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"motivation",children:"Motivation"})}),"\n",(0,i.jsxs)(n.p,{children:["By default, ",(0,i.jsx)(n.code,{children:"copa"})," uses ",(0,i.jsx)(n.a,{href:"https://github.com/aquasecurity/trivy",children:"Trivy"})," to scan container images for vulnerabilities. However, we understand that different organizations have different requirements and may want to use different vulnerability scanners."]}),"\n",(0,i.jsxs)(n.p,{children:["Starting with v0.5.0 and later, ",(0,i.jsx)(n.code,{children:"copa"})," offers extensibility to support different vulnerability scanners. Plugin architecture allows users to use the vulnerability scanner of their choice to patch container images without having to modify ",(0,i.jsx)(n.code,{children:"copa"}),"'s core codebase."]}),"\n",(0,i.jsx)(n.h1,{id:"usage",children:"Usage"}),"\n",(0,i.jsxs)(n.p,{children:["Scanner plugin binaries must be in ",(0,i.jsx)(n.code,{children:"$PATH"}),", and should be prefixed with ",(0,i.jsx)(n.code,{children:"copa-"})," and have executable permissions. Copa will automatically detect and use the scanner plugin if it is in ",(0,i.jsx)(n.code,{children:"$PATH"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["For example, if you have a scanner plugin binary called ",(0,i.jsx)(n.code,{children:"copa-foo"})," in ",(0,i.jsx)(n.code,{children:"$PATH"}),", you can run ",(0,i.jsx)(n.code,{children:"copa"})," with the following command:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"copa patch --scanner foo --image $IMAGE ...\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["You can also a submit scan report in native ",(0,i.jsx)(n.code,{children:"v1alpha1"})," format (interface mentioned below) by using ",(0,i.jsx)(n.code,{children:"--scanner native"})," flag along with ",(0,i.jsx)(n.code,{children:"-r <report>"})," flag."]})}),"\n",(0,i.jsx)(n.h1,{id:"scanner-plugins-from-the-community",children:"Scanner Plugins from the Community"}),"\n",(0,i.jsx)(n.p,{children:"If you have built a scanner plugin and would like to add it to this list, please submit a PR to update this section with your plugin."}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"If you have any issues with a specific plugin, please open an issue in the applicable plugin's repository."})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Grype: ",(0,i.jsx)(n.a,{href:"https://github.com/anubhav06/copa-grype",children:"https://github.com/anubhav06/copa-grype"})]}),"\n"]}),"\n",(0,i.jsx)(n.h1,{id:"writing-a-scanner-plugin",children:"Writing a Scanner Plugin"}),"\n",(0,i.jsxs)(n.p,{children:["Please see instructions at ",(0,i.jsx)(n.a,{href:"https://github.com/project-copacetic/scanner-plugin-template",children:"Scanner Plugin Template"})," for a template to get started with writing a scanner plugin."]}),"\n",(0,i.jsx)(n.h1,{id:"scanner-plugin-interface",children:"Scanner Plugin Interface"}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"alpha"})," versions of the API are not guarenteed to be backwards compatible. Once the API graduates to ",(0,i.jsx)(n.code,{children:"beta"})," and ",(0,i.jsx)(n.code,{children:"stable"}),", it will be backwards compatible."]})}),"\n",(0,i.jsx)(n.p,{children:"Scanner plugins must implement the following interface:"}),"\n",(0,i.jsx)(n.h2,{id:"v1alpha1",children:"v1alpha1"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'type UpdateManifest struct {\n    // API version of the interface (e.g. v1alpha1)\n    APIVersion string         `json:"apiVersion"`\n    // Metadata contains information about the OS and config\n    Metadata   Metadata       `json:"metadata"`\n    // Updates is a list of UpdatePackage that contains information about the package updates\n    Updates    UpdatePackages `json:"updates"`\n}\n\n// UpdatePackages is a list of UpdatePackage\ntype UpdatePackages []UpdatePackage\n\n// Metadata contains information about the OS and config\ntype Metadata struct {\n    OS     OS     `json:"os"`\n    Config Config `json:"config"`\n}\n\ntype OS struct {\n    // OS Type (e.g. debian, alpine, etc.)\n    Type    string `json:"type"`\n    // OS Version (e.g. 11.3)\n    Version string `json:"version"`\n}\n\n// Config contains information about the config\ntype Config struct {\n    // OS Architecture (e.g. amd64, arm64)\n    Arch string `json:"arch"`\n}\n\n// UpdatePackage contains information about the package update\ntype UpdatePackage struct {\n    // Package name\n    Name             string `json:"name"`\n    // Installed version\n    InstalledVersion string `json:"installedVersion"`\n    // Fixed version\n    FixedVersion     string `json:"fixedVersion"`\n    // Vulnerability ID\n    VulnerabilityID  string `json:"vulnerabilityID"`\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"From the above, we can see that the plugin must return a JSON object via standard out with the following fields. For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "apiVersion": "v1alpha1",\n  "metadata": {\n    "os": {\n        "type": "debian",\n        "version": "11.3"\n    },\n    "config": {\n      "arch": "amd64"\n    }\n  },\n  "updates": [\n      {\n          "name": "libcurl4",\n          "installedVersion": "7.74.0-1.3+deb11u1",\n          "fixedVersion": "7.74.0-1.3+deb11u2",\n          "vulnerabilityID": "CVE-2021-22945"\n      }\n  ]\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var a=t(6540);const i={},s=a.createContext(i);function r(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);